
[{"content":"","date":"2025-10-01","externalUrl":null,"permalink":"/tags/bspwm/","section":"Tags","summary":"","title":"Bspwm","type":"tags"},{"content":" 设置环境变量 # 其实只要在 bspwm 的启动文件当中设置就可以了，当然也可以写在你当前用的 shell 配置文件当中，但是如果有多个桌面环境和窗口管理器，可能会导致重复。\n对于 bspwm 来说，在 ~/.config/bspwm/bspwmrc 中配置\nexport XDG_CURRENT_DESKTOP=bspwm ","date":"2025-10-01","externalUrl":null,"permalink":"/posts/2025/10/20251001t150327--bspwm-%E8%AE%BE%E7%BD%AE-xdg-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F__bspwm_linux/","section":"Posts","summary":"","title":"Bspwm 设置 xdg 环境变量","type":"posts"},{"content":"","date":"2025-10-01","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025-10-01","externalUrl":null,"permalink":"/categories/linux/","section":"Categories","summary":"","title":"Linux","type":"categories"},{"content":"","date":"2025-10-01","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"2025-10-01","externalUrl":null,"permalink":"/","section":"Lizqwerscott 的博客","summary":"","title":"Lizqwerscott 的博客","type":"page"},{"content":"","date":"2025-10-01","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025-10-01","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" Desktop Environment # 对于 DE 来说，文件的默认打开应用程序都做了专门的适配，有指定的设置默认应用程序的界面。\n窗口管理器 1 # 但是对于窗口管理器来说，默认是没有这样设置的，就需要使用 xdg-open 来进行指定了。\n在 xdg-open 中设置默认应用 # 首先需要查找 .desktop 文件 # 类似一下命令，在 /usr/share/applications/ 中注册了许多 Gui 应用程序。\nls /usr/share/applications/ | grep -i firefox ls /usr/share/applications/ | grep -i chromium 设置默认应用 # 需要先知道要设置的文件的 MIME 类型，可以去 MIME 查看。\n比如说设置默认浏览器 HTML 的 MIME 类型是 text/html, 想要设置 HTML 默认使用 firefox 打开，就可以使用 xdg-mine 来设置。\nxdg-mime default firefox.desktop text/html 查询当前默认应用 # 可以使用 xdg-mine 的 query 功能。\nxdg-mime query default text/html 这样就会输出当前 HTML 文件默认是用哪个应用程序打开了。\n注释 # 对于窗口管理器来说，最好使用环境变量来告知 xdg-open 当前的桌面环境是啥，具体可以参考这里 Bspwm 设置 xdg 环境变量。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2025-10-01","externalUrl":null,"permalink":"/posts/2025/10/20251001t144429--linux-%E4%B8%8B%E7%9A%84%E9%BB%98%E8%AE%A4%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F__linux/","section":"Posts","summary":"","title":"Linux 下的默认应用程序","type":"posts"},{"content":"","date":"2024-12-14","externalUrl":null,"permalink":"/categories/emacs/","section":"Categories","summary":"","title":"Emacs","type":"categories"},{"content":"","date":"2024-12-14","externalUrl":null,"permalink":"/tags/emacs/","section":"Tags","summary":"","title":"Emacs","type":"tags"},{"content":"","date":"2024-12-14","externalUrl":null,"permalink":"/tags/meow/","section":"Tags","summary":"","title":"Meow","type":"tags"},{"content":" meow 的 beacon-mode # 可以快速的录制 Emacs 键盘宏，并且应用到选择的行上边，但最好使用 meow 进入 beacon-mode 后自动关闭括号自动配对功能，要不然括号自动配对会对宏编辑产生一些影响。 具体例子可以查看 meow 官方的演示\n多行数字按顺序生成 # 当我们使用 meow 键盘宏生成了多行代码的时候，会遇到想要按照顺序生成数组的下标，比如想要使用 meow 生成如下代码的时候:\nint a[3] = {0, 1, 2}; int c = a[0]; int d = a[1]; int e = a[2]; 只能生成：\nint a[3] = {0, 1, 2}; int c = a[0]; int d = a[0]; int e = a[0]; 这时候就可以使用两种方法进行生成\n矩形区域 # 使用 C-x SPC 选择数字所在的矩形区域 rectangle-mark-mode 使用 C-x r k 删除原本的数字 kill-rectangle 使用 C-x r N 来生成递增的数字 rectangle-number-lines (最好加上前缀 C-u 可以自定义开始数字和输出格式) 使用正则替换 # 直接使用 replace-regexp 把相同的数字替换成 \\#, 就是从 0 开头的数字列表了\nvisual-replace # 需要首先打开正则表达式 visual-replace 官方文档 使用 M-% r 打开或者关闭，需要注意的是如果你使用以下配置配置 visual-replace\n(require \u0026#39;visual-replace) (global-set-key (kbd \u0026#34;s-r\u0026#34;) #\u0026#39;visual-replace) (visual-replace-global-mode 1) 那么 visual-replace 的快捷键都是以你配置的快捷键位开头，就要使用 s-r r 来开启正则功能了\n","date":"2024-12-14","externalUrl":null,"permalink":"/posts/2024/12/20241214t205845--meow-%E5%A4%9A%E8%A1%8C%E7%BC%96%E8%BE%91%E7%9A%84%E6%8A%80%E5%B7%A7__emacs_meow/","section":"Posts","summary":"","title":"meow 多行编辑的技巧","type":"posts"},{"content":" 为啥要关闭 # 当我们进入 meow-beacon-mode 后有时候会想要插入括号或者插入引号，而这时候如果默认输入的化还是自动配对括号，会有问题，想要移动光标，使用 meow 的键位来的话，需要按 Esc 那样就直接退出 beacon 模式了。\n实现 # 在 meow-grab 函数启动之前添加 advice, 关闭括号有关的模式\n(advice-add #\u0026#39;meow-grab :before #\u0026#39;(lambda () (call-interactively #\u0026#39;electric-pair-mode) (call-interactively #\u0026#39;fingertip-mode))) ","date":"2024-12-14","externalUrl":null,"permalink":"/posts/2024/12/20241214t203953--meow-%E8%BF%9B%E5%85%A5-beacon-mode-%E5%90%8E%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E6%8B%AC%E5%8F%B7%E8%87%AA%E5%8A%A8%E9%85%8D%E5%AF%B9%E5%8A%9F%E8%83%BD__emacs_meow/","section":"Posts","summary":"","title":"meow 进入 beacon-mode 后自动关闭括号自动配对功能","type":"posts"},{"content":"","date":"2024-02-07","externalUrl":null,"permalink":"/categories/ai/","section":"Categories","summary":"","title":"Ai","type":"categories"},{"content":"","date":"2024-02-07","externalUrl":null,"permalink":"/tags/ai/","section":"Tags","summary":"","title":"Ai","type":"tags"},{"content":" 手动下载模型 # 打开模型的对应页面, 手动点击下载. 缺点: 只能一个一个下载\nGit LFS 模型下载方案（优雅，但不够灵活） # 准备工作 # Git LFS的方案相较于前面自行实现的方案要简洁的多得多. 我们需要在安装 git 的基础上，再安装 git lfs.\ngit lfs install Ubuntu # sudo apt-get install git-lfs 模型下载 # 点击主页下载 # 打开主页面\n点击图中按钮\n点击 Clone respository\n根据图中前两条命令安装\ngit lfs install git clone https://huggingface.co/YeungNLP/firefly-llama2-13b-chat Hugging Face Hub 模型下载方案（优雅，强烈推荐） # 准备工作 # 准备工作同样很简单, 我们只需要安装 huggingface_hub.\n普通安装 huggingface_hub # 详细内容请查看 官方文档\npip install huggingface_hub 如果想使用 TUI 管理 huggingface_hub 下载的模型:\npip install -U \u0026#34;huggingface_hub[cli]\u0026#34; Arch Linux # 在 Arch Linux 中可以安装 AUR 包: python-huggingface-hub 但是没有 CLI 特性, 无法使用 TUI 界面\n推荐使用 uv 安装 huggingface_hub # 方便快捷\nuv tool install huggingface_hub 模型下载 # huggingface_hub 提供了很多种模型下载的方案, 详细的可以到 官方文档 进行查看 默认下载到 ~.cache/huggingface/hub\n使用库下载 # snapshot_download\nfrom huggingface_hub import snapshot_download path = snapshot_download(repo_id=\u0026#34;FlagAlpha/Llama2-Chinese-7b-Chat\u0026#34;) print(path) 忽略一些内容\n在 snaphot_download 方法中, 提供了 allow_regex 和 ignore_regex 两个参数, 简单来说前者是对指定的匹配项进行下载, 后者是忽略指定的匹配项, 下载其余部分. 我们只需要使用其中一种就可以了.\nsnapshot_download(repo_id=\u0026#34;bert-base-chinese\u0026#34;, ignore_regex=[\u0026#34;*.h5\u0026#34;, \u0026#34;*.ot\u0026#34;, \u0026#34;*.msgpack\u0026#34;]) 使用代理\n可以使用:\nexport http_proxy=http://127.0.0.1:20171 export https_proxy=http://127.0.01:20171 然后再执行 python 脚本下载.\n使用 CLI 下载 # 官方文档\n下载单个文件\nhf download gpt2 config.json 下载整个储存库\nhf download HuggingFaceH4/zephyr-7b-beta 过滤\n可以使用 --include 和 --exclude 来过滤下载的文件\n下载到本地文件夹\n使用 --local-dir 来下载到指定文件夹\n","date":"2024-02-07","externalUrl":null,"permalink":"/posts/2024/02/20240207t110700--huggingface-%E4%B8%8B%E8%BD%BD%E6%A8%A1%E5%9E%8B__ai/","section":"Posts","summary":"","title":"huggingface 下载模型","type":"posts"},{"content":" 安装 llama.cpp # 详细的可以看 官方编译文档\n下载 llamap.cpp 代码 # git clone https://github.com/ggerganov/llama.cpp 编译 # CPU # cmake -B build cmake --build build --config Release -j 16 CUDA # 需要 CUDA toolkit\ncmake -B build -DGGML_CUDA=ON cmake --build build --config Release -j 16 可以设置环境变量 GGML_CUDA_ENABLE_UNIFIED_MEMORY=1 来使用统一内存架构在 CPU 和 GPU 之后共享内存，但是会损害非集成 GPU 的性能 (但可以支持集成 GPU 的性能)。\n生成量化版本模型 # 详细可以查看 官方量化文档\n首先安装转化脚本依赖 # 普通安装 # # install Python dependencies python3 -m pip install -r requirements.txt 使用 uv # 最好使用 --index-strategy unsafe-best-match 使用这个可以防止 numpy 没有对应版本的包导致的报错。 这个参数不管先后顺序，把所有 index 都混起来找最合适的版本。\nuv venv --python 3.11 uv pip install -r ./requirements.txt --index-strategy unsafe-best-match 然后激活 .venv 虚拟环境\n从 huggingface 下载的模型 # 首先下载模型 # 可以从 huggingface 下载模型 了解，或者如果在 ModelScope 上面有镜像的话，可以使用 ModelScope 提供的工具下载。\n获取下载目录 # 一般下载好的就在 ~/.cache/huggingface/hub 目录中. 例如, 从 firefly-llama2-13b-chat 下载的就在:\n~/.cache/huggingface/hub/models\u0026ndash;YeungNLP\u0026ndash;firefly-llama2-13b-chat/snapshots/7e72d87fb49a727d9078b4d721e3319f4642f8bc\n转换 # 直接执行这个脚本, 生成的 gguf 模型就在你下载的模型文件夹中，默认转化的为 ggml FP16 格式\npython convert_hf_to_gguf.py /path/model/path 量化 # 这样就量化成 4-bits（使用 Q4_K_M 方法）\n./llama-quantize ./path/model-f16.gguf ./path/model-Q4_K_M.gguf Q4_K_M 可以使用 GGUF-my-repo 来在线量化 # 加载并启动模型 # 直接运行 # 详细查看 官方文档\nCPU 直接运行 # ./llama-cli -m ./models/model.gguf -cnv -p \u0026#34;You are a helpful assistant\u0026#34; CPU 与 GPU 运行 # 如已通过 Metal 编译或者使用了 cuBLAS 编译，则只需加上 -ngl 1 即可启用GPU推理.\n./llama-cli -m ./models/model.gguf -cnv -ngl 1 -p \u0026#34;You are a helpful assistant\u0026#34; 启动服务器 # 详细查看 官方文档 和直接运行一样, 可以 CPU 与 GPU 一起运行\n./llama-server -m ./models/model.gguf -cnv -ngl 1 关于量化方法选择及推理速度 # 量化参数介绍: 量化统计表格\n结论 1 # 结论来源: alpaca llama.cpp 量化部署\n默认的量化方法为 q4_0，虽然速度最快但损失也是最大的，其余方法各有利弊，按实际情况选择 需要注意的是F16以及 q8_0 并不会因为增加线程数而提高太多速度 线程数 -t 与物理核心数一致时速度最快，超过之后速度反而变慢（M1 Max上从8改到10之后耗时变为3倍） 如果使用了Metal版本（即启用了苹果GPU解码），速度还会有进一步显著提升，表中标注为 -ngl 1 综合推荐（仅供参考）：7B推荐 Q5_1 或 Q5_K_S，13B 推荐 Q5_0 或 Q5_K_S 机器资源够用且对速度要求不是那么苛刻的情况下可以使用 q8_0 或 Q6_K，接近 F16 模型的效果 注释 # 这个结论可能有点老了\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-02-07","externalUrl":null,"permalink":"/posts/2024/02/20240207t110600--llamacpp-%E9%87%8F%E5%8C%96%E9%83%A8%E7%BD%B2__ai/","section":"Posts","summary":"","title":"llama.cpp 量化部署","type":"posts"},{"content":" 背景 # 在使用 ROS Melodic 的时候, cv_bridge 默认是使用 python2.7. 在 python3 中使用 cv_bridge 会出现错误.\n解决办法 # 自己编译 python3 版本的 cv_bridge\n依赖 # 使用以下命令安装需要的依赖\nsudo apt-get install python3-pip python-catkin-tools python3-dev python3-numpy sudo pip3 install rospkg catkin_pkg 编译 # 需要创建一个工作空间\nmkdir -p ~/cvbridge_build_ws/src cd ~/cvbridge_build_ws/src 下载 noetic 版本的 cv_bridge\n使用这个 github 仓库的 noetic 分支, 将代码放到 cvbridge_build_ws/src 目录下\ngit clone\ngit clone -b noetic https://github.com/ros-perception/vision_opencv.git 修改需要编译的 Python 版本\n首先需要确保你 Ubuntu 系统的 python 默认是 python3, 修改 vision_opencv/cv_bridge/CMakeLists.txt 将:\nfind_package(Boost REQUIRED python37) 修改为:\nfind_package(Boost REQUIRED python3) 编译\n首先需要知道你的 python3 路径在那里, 可以使用以下命令获得:\nwhere python3 或者\nwhich python3 然后知道 python 的 include 路径, 可以使用以下命令获得:\nimport sys print(sys.executable) #Print python3 executable path print(sys.path) #Print python3 library path 或者使用\npython3-config --includes 然后根据以下获得的变量执行下列命令:\ncd ~/cvbridge_build_ws catkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/aarch64-linux-gnu/libpython3.6m.so catkin config --install 编译 cv_bridge\ncatkin build cv_bridge 使用\n当前终端临时使用\nsource install/setup.bash --extend 开机自动使用\n可以添加到 .bashrc 里面\nsource ~/cvbridge_build_ws/install/setup.bash --extend ","date":"2023-11-28","externalUrl":null,"permalink":"/posts/2023/11/20231128t144727--%E5%9C%A8-ros-melodic-%E7%89%88%E6%9C%AC%E4%B8%8A%E5%AE%89%E8%A3%85-cv-bridge-with-python3__linux/","section":"Posts","summary":"","title":"在 Ros melodic 版本上安装 cv bridge with python3","type":"posts"},{"content":" 查看图片 # nsxiv feh ueberzugpp ssh # tssh # 可以搜索, 支持快捷登录 ssh. 文档\ntrzsz # 文档\n安装 # Ubuntu\nsudo apt update \u0026amp;\u0026amp; sudo apt install software-properties-common sudo add-apt-repository ppa:trzsz/ppa \u0026amp;\u0026amp; sudo apt update sudo apt install trzsz Arch\nyay -Syu yay -S trzsz 快速使用指南 # trz 上传文件\ntrz 命令可以不带任何参数，将上传文件到当前目录。也可以带一个目录参数，指定上传到哪个目录。\ntsz 下载文件\ntsz 可以带一个或多个文件名（可使用相对路径或绝对路径，也可使用通配符），将下载指定的文件。\n-q 静默模式\ntrz -q 或 tsz -q xxx ( 加上 -q 选项 )，则在传输文件时不显示进度条。\n-d / -r 传输文件夹\ntrz -d 或 tsz -r xxx ( 加上 -d 或 -r 选项 )，则可以上传或下载指定文件夹和文件。\n-y 覆盖模式\ntrz -y 或 tsz -y xxx ( 加上 -y 选项 )，如果存在相同文件名的文件就直接覆盖，并支持断点续传。\n-b 二进制模式\ntrz -b 或 tsz -b xxx ( 加上 -b 选项 )，二进制传输模式，对于压缩包、图片、影音等较快。\n-e 转义控制字符\n二进制模式时，控制字符可能会导致失败, trz -eb 或 tsz -eb xxx ( 加上 -e 选项 ) 转义所有已知的控制字符。\n-B 缓冲区上限\ntrz -B 20m 或 tsz -B 2M xxx 等，设置最大缓冲区上限 ( 默认 10M )。会自动根据网速选择合适的缓冲区大小，但不会超过此上限。\n-t 超时时间\ntrz -t 30 或 tsz -t 30 xxx 等，设置超时秒数 ( 默认 20 秒 )。在超时时间内，如果无法传完一个缓冲区大小的数据则会报错并退出。设置为 0 或负数，则永不超时。\n有趣 # 黑客帝国 # cmatrix\n统计行数 # tokei # 包管理器 # pacman 使用 # pacman -Ss abc #搜索有关abc信息的包 pacman -Qs abc # 查找本地安装的软件包(模糊字符串查找) pacman -Sy abc #和源同步后安装名为abc的包 pacman -S abc #从本地数据库中得到abc的信息，下载安装abc包 pacman -Sf abc #强制安装包abc pacman -Si abc #从数据库中搜索包abc的信息 pacman -Q # 列出已经安装的软件包 pacman -Q abc # 检查 abc 软件包是否已经安装 pacman -Qi abc #列出已安装的包abc的详细信息 pacman -Ql abc # 列出abc软件包的所有文件 pacman -Qo /path/to/abc # 列出abc文件所属的软件包 pacman -Syu #同步源，并更新系统 pacman -Sy #仅同步源 pacman -Su #更新系统 pacman -R abc #删除abc包 pacman -Rd abc #强制删除被依赖的包 pacman -Rc abc #删除abc包和依赖abc的包 pacman -Rsc abc #删除abc包和abc依赖的包 pacman -Rscn abc #删除abc包和abc依赖的包以及配置文件 pacman -Sc #清理/var/cache/pacman/pkg目录下的旧包 pacman -Scc #清除所有下载的包和数据库 pacman -U abc #安装下载的abs包，或新编译的abc包 pacman -Sd abc #忽略依赖性问题，安装包abc pacman -Su --ignore foo #升级时不升级包foo pacman -Sg abc #查询abc这个包组包含的软件包 SQL # MySQL # mycli # SQLite3 # litecli # PDF # 编辑 # pdfcpu\n查看 # zathura\n文件管理器 # yazi # 预览其他插件\npreview\n预览图片需要 ueberzugpp ranger # joshuto # 压缩 # 解压 # theunarchiver # 支持解压 window 压缩包不乱码, 支持类似 bandizip 的智能解压, 可以自动创建目录.\n注意\n只支持解压\n查看目录文件 # eza # 一个现代的、维护良好的 ls 替代品。\n配置 # 让 ls 支持 git 仓库, 图标, 超链接和颜色\nalias eza=\u0026#34;eza --icons=auto --hyperlink --color=always --color-scale=all --color-scale-mode=gradient --git --git-repos\u0026#34; alias ls=\u0026#34;eza\u0026#34; 命令行垃圾回收 # gtrash # 可以实现垃圾回收站的功能，有一个 Tui 界面实现文件恢复功能\n查看磁盘挂载 df 替代品 # dysk # duf # ","date":"2023-11-27","externalUrl":null,"permalink":"/posts/2023/11/20231127t205837--linux-%E8%BD%AF%E4%BB%B6__linux/","section":"Posts","summary":"","title":"Linux 软件","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]